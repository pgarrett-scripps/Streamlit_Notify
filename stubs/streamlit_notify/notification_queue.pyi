from .notification_dataclass import StatusElementNotification as StatusElementNotification
from typing import Callable, Generator, Iterable, Literal

def default_sort_func(x: StatusElementNotification) -> int: ...

class NotificationPriorityQueue:
    def __init__(self, queue_name: str, sort_func: Callable[[StatusElementNotification], int] | None = None) -> None: ...
    @property
    def queue(self) -> list[StatusElementNotification]: ...
    @property
    def queue_name(self) -> str: ...
    @property
    def sort_func(self) -> Callable[[StatusElementNotification], int]: ...
    def ensure_queue(self) -> None: ...
    def has_items(self) -> bool: ...
    def is_empty(self) -> bool: ...
    def append(self, item: StatusElementNotification) -> None: ...
    def extend(self, items: Iterable[StatusElementNotification]) -> None: ...
    def remove(self, item: StatusElementNotification | int) -> None: ...
    def contains(self, item: StatusElementNotification) -> bool: ...
    def get_all(self, priority: int | None = None, priority_type: Literal['le', 'lt', 'ge', 'gt', 'eq'] = 'eq') -> list[StatusElementNotification]: ...
    def clear(self) -> None: ...
    def pop(self, index: int = 0) -> StatusElementNotification: ...
    def get(self, index: int = 0) -> StatusElementNotification: ...
    def size(self) -> int: ...
    def __len__(self) -> int: ...
    def __bool__(self) -> bool: ...
    def __contains__(self, item: StatusElementNotification) -> bool: ...
    def __getitem__(self, index: int) -> StatusElementNotification: ...
    def __setitem__(self, index: int, value: StatusElementNotification) -> None: ...
    def __delitem__(self, index: int) -> None: ...
    def __hash__(self) -> int: ...
    def __eq__(self, other: object) -> bool: ...
    def __ne__(self, other: object) -> bool: ...
    def __lt__(self, other: object) -> bool: ...
    def __iter__(self) -> Generator[StatusElementNotification, None, None]: ...
    def __reversed__(self) -> Generator[StatusElementNotification, None, None]: ...
    def __copy__(self) -> NotificationPriorityQueue: ...
    def __deepcopy__(self, memo: dict[int, object]) -> NotificationPriorityQueue: ...
