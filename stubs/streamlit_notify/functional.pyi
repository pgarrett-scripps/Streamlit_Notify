from .notification_dataclass import StatusElementNotification as StatusElementNotification
from .notification_queue import NotificationPriorityQueue as NotificationPriorityQueue
from .status_element_types import NotificationType as NotificationType, STATUS_ELEMENTS as STATUS_ELEMENTS
from .utils import get_status_element as get_status_element
from _typeshed import Incomplete
from typing import Any, Iterable, Literal

def toast_stn(*args: Any, **kwargs: Any) -> None: ...
def balloons_stn(*args: Any, **kwargs: Any) -> None: ...
def snow_stn(*args: Any, **kwargs: Any) -> None: ...
def success_stn(*args: Any, **kwargs: Any) -> None: ...
def info_stn(*args: Any, **kwargs: Any) -> None: ...
def error_stn(*args: Any, **kwargs: Any) -> None: ...
def warning_stn(*args: Any, **kwargs: Any) -> None: ...
def exception_stn(*args: Any, **kwargs: Any) -> None: ...

NotificationStrTypes: Incomplete

def create_notification(*args: Any, **kwargs: Any) -> StatusElementNotification: ...
def notify(notification_type: NotificationStrTypes | Iterable[NotificationStrTypes] | None = None, remove: bool = True, priority: int | None = None, priority_type: Literal['le', 'ge', 'eq'] = 'ge') -> None: ...
def get_notifications(notification_type: NotificationStrTypes | Iterable[NotificationStrTypes] | None = None, priority: int | None = None, priority_type: Literal['le', 'ge', 'eq'] = 'ge') -> list[StatusElementNotification]: ...
def clear_notifications(notification_type: NotificationStrTypes | Iterable[NotificationStrTypes] | None = None) -> None: ...
def get_notification_queue(notification_type: NotificationStrTypes) -> NotificationPriorityQueue: ...
def has_notifications(notification_type: NotificationStrTypes | Iterable[NotificationStrTypes] | None = None) -> bool: ...
def remove_notifications(notifications: StatusElementNotification | Iterable[StatusElementNotification]) -> None: ...
def add_notifications(notifications: StatusElementNotification | Iterable[StatusElementNotification]) -> None: ...
